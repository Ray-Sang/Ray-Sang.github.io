<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://ray-sang.github.io</id>
    <title>Ray&apos;s Space</title>
    <updated>2020-09-30T14:10:48.511Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://ray-sang.github.io"/>
    <link rel="self" href="https://ray-sang.github.io/atom.xml"/>
    <subtitle>Plain living and high thicking</subtitle>
    <logo>https://ray-sang.github.io/images/avatar.png</logo>
    <icon>https://ray-sang.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Ray&apos;s Space</rights>
    <entry>
        <title type="html"><![CDATA[每日一图 2020/09/30]]></title>
        <id>https://ray-sang.github.io/post/mei-ri-yi-tu-20200930/</id>
        <link href="https://ray-sang.github.io/post/mei-ri-yi-tu-20200930/">
        </link>
        <updated>2020-09-30T14:02:13.000Z</updated>
        <content type="html"><![CDATA[<p>九月的最后一天。周三。</p>
<p>耳机里放的是病态三部曲。“如果我，露出斑点满身，可会被抱紧”。</p>
<p>焊板子，很快乐。风枪320度低风。<br>
<img src="https://raw.githubusercontent.com/Ray-Sang/picsbed1/master/picgo/20200930-1.JPG" alt="" loading="lazy"></p>
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/Ray-Sang/picsbed1/master/picgo/20200930-2.JPG" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一图 2020/09/29]]></title>
        <id>https://ray-sang.github.io/post/mei-ri-yi-tu-20200929/</id>
        <link href="https://ray-sang.github.io/post/mei-ri-yi-tu-20200929/">
        </link>
        <updated>2020-09-29T15:54:46.000Z</updated>
        <summary type="html"><![CDATA[<p>收到了之前拜托朋友买的专辑。</p>
]]></summary>
        <content type="html"><![CDATA[<p>收到了之前拜托朋友买的专辑。</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://raw.githubusercontent.com/Ray-Sang/picsbed1/master/picgo/2020929-1.JPG" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="2"><img src="https://raw.githubusercontent.com/Ray-Sang/picsbed1/master/picgo/2020929-2.JPG" alt="" loading="lazy"></figure>
<figure data-type="image" tabindex="3"><img src="https://raw.githubusercontent.com/Ray-Sang/picsbed1/master/picgo/2020929-3.JPG" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[每日一图 2020/09/27]]></title>
        <id>https://ray-sang.github.io/post/mei-ri-yi-tu-20200927/</id>
        <link href="https://ray-sang.github.io/post/mei-ri-yi-tu-20200927/">
        </link>
        <updated>2020-09-27T15:21:07.000Z</updated>
        <summary type="html"><![CDATA[<p>回顾一下昨天在 Blue Note 上海的火星电台.</p>
]]></summary>
        <content type="html"><![CDATA[<p>回顾一下昨天在 Blue Note 上海的火星电台.</p>
<!-- more -->
<figure data-type="image" tabindex="1"><img src="https://i.loli.net/2020/09/27/2uSlM6sEJGnD7UI.jpg" alt="2uSlM6sEJGnD7UI" loading="lazy"></figure>
<p>韩阳, 黄少, 曾宇, 贝贝.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lecture 6, understand signals with select statement]]></title>
        <id>https://ray-sang.github.io/post/lecture-6-understand-signals-with-select-statement/</id>
        <link href="https://ray-sang.github.io/post/lecture-6-understand-signals-with-select-statement/">
        </link>
        <updated>2020-09-24T08:34:07.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="lecture-6-understand-signals-with-select-statement">Lecture 6, understand signals with select statement</h1>
<p>In this lecture, we will discuss signals and concurrent statements:</p>
<ul>
<li>when-else statement</li>
<li>with select statement</li>
</ul>
<h2 id="signals">signals</h2>
<p>Signals represent wires within a circuit.</p>
<pre><code class="language-vhdl">architecture and_gt of anding is
	signal a, b, temp : std_logic;
	
	begin
		temp &lt;= a and b;
		C &lt;= temp and D
end and_gt
</code></pre>
<p>The signals can be used :</p>
<ul>
<li>to connect design entities together &amp; communicate changes in values within a design</li>
<li>instead of input ports</li>
</ul>
<h2 id="concurrent-statement">Concurrent statement</h2>
<p>concurrent: at the same time, parallel<br>
concurrent constructs:</p>
<ul>
<li>when else statement</li>
<li>with select statement</li>
</ul>
<p>Take <strong>combinational feedback</strong> for example:<br>
In VHDL, if you write <code>X &lt;= X + Y;</code> , you get a adder whose output feedbacks to its input. It is a very <strong>bad</strong> style of design, a <strong>sin</strong>!</p>
<h2 id="drivers">Drivers</h2>
<p>In <code>Z &lt;= A</code> , A becomes the driver of Z.<br>
Avoid multiple drivers:</p>
<pre><code class="language-vhdl">architecture CONCURRENT of MULTIPLE is
	signal Z, A, B, C, D : std_logic;
begin 
	Z &lt;= A and B;
	Z &lt;= C and D;
end CONCURRENT
</code></pre>
<p>As shown, Z was assigned two times, hence has multiple drivers.</p>
<p>That lead to <strong>conditional assignment</strong>.</p>
<h2 id="when-statement">when statement</h2>
<pre><code class="language-vhdl">Z &lt;= A when ASSIGN_A = '1' else
	 B when ASSIGN_B = '1' else
	 C；
</code></pre>
<ul>
<li>modeling tri-state buffer</li>
</ul>
<pre><code class="language-vhdl">architecture tri_ex_a of tri_ex is
	signal out1 : std_logic;
begin
	out1 &lt;= in1 when control = '1' else
		'Z'; -- high impedence, no current flowing(current cannot flow at all)
end tri_ex_a;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lecture 5, understand architecture better]]></title>
        <id>https://ray-sang.github.io/post/lecture-5-understand-architecture-better/</id>
        <link href="https://ray-sang.github.io/post/lecture-5-understand-architecture-better/">
        </link>
        <updated>2020-09-24T08:32:32.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="lecture-5-understand-architecture-better">Lecture 5, understand architecture better</h1>
<h2 id="styles-of-architectural-modeling">Styles of architectural modeling</h2>
<p>In lecture 1, we have discussed the 3 different architectural modeling:</p>
<h3 id="dataflow">Dataflow</h3>
<pre><code class="language-vhdl">-- the dataflow style
architecture Dataflow_HA of Half_Adder is
    begin
        SUM &lt;= A xor B;
        CARRY &lt;= A and B;
    end Dataflow_HA;
</code></pre>
<h3 id="behavioral">Behavioral</h3>
<p>No need to focus on the gate-level implementation of a design.<br>
VHDL -&gt; compiler -&gt; systhesis tool -&gt; gates(circuits)</p>
<pre><code class="language-vhdl">-- the behavioral style
architecture Dataflow_HA of Half_Adder is
    begin
        if A='1' and B='1' then
        	CARRY &lt;= '1';
        else
        	CARRY &lt;= '0';
        end if
    end Dataflow_HA;
</code></pre>
<h3 id="structural">Structural</h3>
<pre><code class="language-vhdl">-- the structural style
architecture Structure_HA of Half_Adder is
    component XOR1
        port(P, Q: in BIT; R : out BIT);
    end component;
        
    component AND1
        port(X, Y: in BIT; Z : out BIT);
    end component;
    
    begin
        X1 : XOR1 port map(A, B, SUM);
        A1 : AND1 port map(A, B, CARRY);
    end Structure_HA;
</code></pre>
<h2 id="the-utility-of-architecture">The utility of architecture</h2>
<p>Architecture specifies:</p>
<ul>
<li>behavior: What the design will do</li>
<li>function</li>
<li>relations between inputs and outputs of an entity</li>
</ul>
<p>syntax:</p>
<pre><code class="language-vhdl">architecture architecture_name of entity_name is
declarations
begin 
	concurrent_statements -- the codes are executed at the same time!!
	-- sequential statements have particular syntax/style, 
	-- will be discussed later
end architecture_name
</code></pre>
<p>Note that a design can be described in an Architecture using various <strong>levels of abstraction</strong>; An entity can have more than one architecture; There can be no architecture without an entity.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lecture 4, Switches Leds simulation using VHDL test bench]]></title>
        <id>https://ray-sang.github.io/post/lecture-4-switches-leds-simulation-using-vhdl-test-bench/</id>
        <link href="https://ray-sang.github.io/post/lecture-4-switches-leds-simulation-using-vhdl-test-bench/">
        </link>
        <updated>2020-09-24T08:31:46.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="lecture-4-switches-leds-simulation">Lecture 4, Switches LEDs simulation</h1>
<p>This is the simulation part of lab1.</p>
<p>To test the module, we use test bench to test.</p>
<p>Click &quot;entity-new source-VHDL test bench-file name:xxxx_tb(name it right!)-next-next-finish&quot;</p>
<p>The test code will generate automatically, as following.<br>
Write our own test code in the last part of the code, begin with comment &quot;-- insert stimulus here&quot;:</p>
<pre><code class="language-vhdl">LIBRARY ieee;
USE ieee.std_logic_1164.ALL;
 
-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--USE ieee.numeric_std.ALL;
 
ENTITY Switches_LEDs_tb IS
END Switches_LEDs_tb;
 
ARCHITECTURE behavior OF Switches_LEDs_tb IS 
 
    -- Component Declaration for the Unit Under Test (UUT)
 
    COMPONENT Switches_LEDs
    PORT(
         switch1 : IN  std_logic;
         switch2 : IN  std_logic;
         led1 : OUT  std_logic;
         led2 : OUT  std_logic
        );
    END COMPONENT;
    

   --Inputs
   signal switch1 : std_logic := '0';
   signal switch2 : std_logic := '0';

 	--Outputs
   signal led1 : std_logic;
   signal led2 : std_logic;
   -- No clocks detected in port list. Replace &lt;clock&gt; below with 
   -- appropriate port name 
 
   --constant &lt;clock&gt;_period : time := 10 ns;
   --remember to delete the clock because in this test we dont use clock
 
BEGIN
 
	-- Instantiate the Unit Under Test (UUT)
   uut: Switches_LEDs PORT MAP (
          switch1 =&gt; switch1,
          switch2 =&gt; switch2,
          led1 =&gt; led1,
          led2 =&gt; led2
        );

   -- Clock process definitions
   --&lt;clock&gt;_process :process
  -- begin
	--	&lt;clock&gt; &lt;= '0';
	--	wait for &lt;clock&gt;_period/2;
	--	&lt;clock&gt; &lt;= '1';
	--	wait for &lt;clock&gt;_period/2;
 --  end process;
 

   -- Stimulus process
   stim_proc: process
   begin		
      -- hold reset state for 100 ns.
      wait for 100 ns;	

      --wait for &lt;clock&gt;_period*10;

      -- insert stimulus here 
		switch1 &lt;= '0'; -- initialise input
		switch2 &lt;= '0';
		wait for 10 ns;
		
		switch1 &lt;= '1';
		switch2 &lt;= '0';
		wait for 10 ns;
		
		switch1 &lt;= '0';
		switch2 &lt;= '1';
		wait for 10 ns;
		
		switch1 &lt;= '1';
		switch2 &lt;= '1';
		wait for 10 ns;
		
      wait;
   end process;

END;

</code></pre>
<p>Change to simulation view in the top left &quot;View&quot;. Double click down left &quot;Simulate Behavioral Model&quot; to see the simulation result.</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lecture 3, switches control LEDs]]></title>
        <id>https://ray-sang.github.io/post/lecture-3-switches-control-leds/</id>
        <link href="https://ray-sang.github.io/post/lecture-3-switches-control-leds/">
        </link>
        <updated>2020-09-24T08:30:36.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="using-ise">Using ISE</h1>
<p>Make a simulation that switch1 controls led1, while switch2 controls led2.</p>
<p>Codes are as follows, written in VHDL.</p>
<h1 id="lecture-3-lab-1-switches-leds-explanation">Lecture 3: Lab 1, Switches LEDs explanation</h1>
<pre><code class="language-vhdl">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx primitives in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity Switches_LEDs is
port(
	  switch1 : in std_logic;
	  switch2 : in std_logic;
	  led1 : out std_logic;
	  led2 : out std_logic
	  );
end Switches_LEDs;

architecture Behavioral of Switches_LEDs is

begin

led1 &lt;= switch1;
led2 &lt;= switch2;

end Behavioral;
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lecture 2]]></title>
        <id>https://ray-sang.github.io/post/lecture-2/</id>
        <link href="https://ray-sang.github.io/post/lecture-2/">
        </link>
        <updated>2020-09-24T08:29:54.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<h1 id="lecture-2">Lecture 2</h1>
<ul>
<li>understading entity better</li>
<li>data types:
<ul>
<li>BIT</li>
<li>BOOLEAN</li>
<li>STD_LOGIC</li>
</ul>
</li>
</ul>
<h2 id="a-few-kay-terms">A few kay terms</h2>
<ul>
<li>
<p>Assigned<br>
<code>x &lt;= y; -- x is assinged the value of y</code></p>
</li>
<li>
<p>Read/reading<br>
<code>x &lt;= y; -- x is reading the value of y</code></p>
</li>
<li>
<p>Drivers<br>
Drivers give value to make signals in the following circuit.</p>
</li>
</ul>
<h2 id="four-types-of-modes-are-used-in-vhdl">Four types of Modes are used in VHDL</h2>
<ul>
<li><strong>Mode in</strong><br>
Values can be read from port(outside of the entity) but not assigned.</li>
</ul>
<pre><code class="language-vhdl">entity driver is
port(A : in std_logic;
	 B : out std_logic;
	 Data : inout std_logic;
	 Count : buffer std_logic);
end driver;
</code></pre>
<ul>
<li><strong>Mode out</strong><br>
Can wirte the value into the output port.</li>
<li>Mode inout<br>
You can read the signal from the inside of the entity and also outside.<br>
Bi-directional.</li>
<li>Mode buffer</li>
</ul>
<h2 id="few-data-types">Few Data Types</h2>
<ul>
<li>BIT data type<br>
Supports the value of <strong>logic</strong> '0' &amp; '1', for example:</li>
</ul>
<pre><code class="language-vhdl">entity driver is
port(A : in BIT;
     B : out BIT;
     Data : inout BIT);
end driver
</code></pre>
<ul>
<li>
<p>BOOLEAN<br>
Supports literals FALSE &amp; TRUE, less frequently used.</p>
</li>
<li>
<p>STD_LOGIC<br>
Most commonly used, which is defined in the std_logic_1164 package of IEEE library. It is defined as: ('U', 'X', '0', '1', 'Z', 'W', 'L', 'H', '-'), totally 9 states.</p>
</li>
</ul>
<pre><code>TYPE std_logic IS ( 'U',  -- Uninitialized
                    'X',  -- Forcing  Unknown
                    '0',  -- Forcing  0
                    '1',  -- Forcing  1
                    'Z',  -- High Impedance, usually no current 
                    'W',  -- Weak     Unknown
                    'L',  -- Weak     0       
                    'H',  -- Weak     1       
                    '-'   -- Don't care
                    );
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Lecture 1 of VHDL, entity and arch]]></title>
        <id>https://ray-sang.github.io/post/lecture-1-of-vhdl-entity-and-arch/</id>
        <link href="https://ray-sang.github.io/post/lecture-1-of-vhdl-entity-and-arch/">
        </link>
        <updated>2020-09-24T08:29:05.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<pre><code class="language-vhdl">library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

entity Switches_LEDs is
    Port(switch_0 : in STD_LOGIC;
         switch_1 : in STD_LOGIC;
         LED_0 : out STD_LOGIC;
         LED_1 : out STD_LOGIC);
end Switches_LEDs;

architecture Behavioral of Switches_LEDs is
begin
    LED_0 &lt;= switch_0; 
    LED_1 &lt;= switch_1;
end Behavioral;
</code></pre>
<pre><code class="language-vhdl">entity Half_Adder is
    port(A, B : in BIT;
        SUM, CARRY : out BIT);
end Half_Adder;
</code></pre>
<p>You can have one entity but different architectures.<br>
Three styles: structure, dataflow, behavioral</p>
<pre><code class="language-vhdl">-- the firsts style
architecture Structure_HA of Half_Adder is
    component XOR1
    	port(P, Q: in BIT; R : out BIT);
    end component;
        
    component AND1
        port(X, Y: in BIT; Z : out BIT);
    end component;
    
    begin
        X1 : XOR1 port map(A, B, SUM);
    	A1 : AND1 port map(A, B, CARRY);
    end Structure_HA;
            
-- the second style
architecture Dataflow_HA of Half_Adder is
    begin
        SUM &lt;= A xor B;
    	CARRY &lt;= A and B;
    end Dataflow_HA;
                        
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何在typecho中插入图片，并使其居中]]></title>
        <id>https://ray-sang.github.io/post/ru-he-zai-typecho-zhong-cha-ru-tu-pian-bing-shi-qi-ju-zhong/</id>
        <link href="https://ray-sang.github.io/post/ru-he-zai-typecho-zhong-cha-ru-tu-pian-bing-shi-qi-ju-zhong/">
        </link>
        <updated>2020-09-24T00:37:58.000Z</updated>
        <content type="html"><![CDATA[<!-- more -->
<p>在使用typecho的时候，我发现markdown语法插入的图片默认向左对齐，不甚美观。通过在编辑器中强制使用html语法，实现图片居中效果。代码如下：</p>
<pre><code class="language-html">!!!
&lt;center&gt;&lt;img src=&quot;https://www.sangrui.xyz:60001/usr/uploads/2020/09/4087492125.jpg&quot; title=&quot;test&quot;&gt;&lt;/center&gt;
!!!
</code></pre>
]]></content>
    </entry>
</feed>